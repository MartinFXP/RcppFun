// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// concatenate
String concatenate(std::string x, std::string y);
RcppExport SEXP _RcppFun_concatenate(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::string >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(concatenate(x, y));
    return rcpp_result_gen;
END_RCPP
}
// compareMV
SEXP compareMV(CharacterMatrix x, CharacterVector y, std::string s);
RcppExport SEXP _RcppFun_compareMV(SEXP xSEXP, SEXP ySEXP, SEXP sSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< std::string >::type s(sSEXP);
    rcpp_result_gen = Rcpp::wrap(compareMV(x, y, s));
    return rcpp_result_gen;
END_RCPP
}
// extendData
SEXP extendData(NumericMatrix x, double exp, double base, double fac);
RcppExport SEXP _RcppFun_extendData(SEXP xSEXP, SEXP expSEXP, SEXP baseSEXP, SEXP facSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type exp(expSEXP);
    Rcpp::traits::input_parameter< double >::type base(baseSEXP);
    Rcpp::traits::input_parameter< double >::type fac(facSEXP);
    rcpp_result_gen = Rcpp::wrap(extendData(x, exp, base, fac));
    return rcpp_result_gen;
END_RCPP
}
// eigenMapMatMult
SEXP eigenMapMatMult(const Eigen::Map<Eigen::MatrixXd> A, Eigen::Map<Eigen::MatrixXd> B);
RcppExport SEXP _RcppFun_eigenMapMatMult(SEXP ASEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type A(ASEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::MatrixXd> >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(eigenMapMatMult(A, B));
    return rcpp_result_gen;
END_RCPP
}
// transClose_W
SEXP transClose_W(NumericMatrix x);
RcppExport SEXP _RcppFun_transClose_W(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(transClose_W(x));
    return rcpp_result_gen;
END_RCPP
}
// transClose_Del
SEXP transClose_Del(NumericMatrix x, IntegerVector u, IntegerVector v);
RcppExport SEXP _RcppFun_transClose_Del(SEXP xSEXP, SEXP uSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type u(uSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(transClose_Del(x, u, v));
    return rcpp_result_gen;
END_RCPP
}
// transClose_Ins
SEXP transClose_Ins(NumericMatrix x, IntegerVector u, IntegerVector v);
RcppExport SEXP _RcppFun_transClose_Ins(SEXP xSEXP, SEXP uSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type u(uSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(transClose_Ins(x, u, v));
    return rcpp_result_gen;
END_RCPP
}
// maxCol_row
SEXP maxCol_row(NumericMatrix x);
RcppExport SEXP _RcppFun_maxCol_row(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(maxCol_row(x));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_RcppFun_concatenate", (DL_FUNC) &_RcppFun_concatenate, 2},
    {"_RcppFun_compareMV", (DL_FUNC) &_RcppFun_compareMV, 3},
    {"_RcppFun_extendData", (DL_FUNC) &_RcppFun_extendData, 4},
    {"_RcppFun_eigenMapMatMult", (DL_FUNC) &_RcppFun_eigenMapMatMult, 2},
    {"_RcppFun_transClose_W", (DL_FUNC) &_RcppFun_transClose_W, 1},
    {"_RcppFun_transClose_Del", (DL_FUNC) &_RcppFun_transClose_Del, 3},
    {"_RcppFun_transClose_Ins", (DL_FUNC) &_RcppFun_transClose_Ins, 3},
    {"_RcppFun_maxCol_row", (DL_FUNC) &_RcppFun_maxCol_row, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_RcppFun(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
